#ifndef LIBNET_HTTP_DEF_H_
#define LIBNET_HTTP_DEF_H_

#define LIBNET_HTTP_SIZE_REASON 		32
#define LIBNET_HTTP_HEADER_SIZE_KEY		32
#define LIBNET_HTTP_HEADER_SIZE_VALUE	256

#define LIBNET_HTTP_AGENT_DEFAULT		"libnet-api-http-mod"

#define LIBNET_HTTP_SIZE_BUF 			256
#define LIBNET_HTTP_SIZE_REQ			4096

#define LIBNET_HTTP_PORT_DEF			80
#define LIBNET_HTTPS_PORT_DEF			443

#define LIBNET_HTTP_DEL					"\r\n"
#define LIBNET_HTTP_EOH					"\r\n\r\n" // End Of Header

#define LIBNET_HTTP_SIZE_CHUNK			4096

typedef enum http_ver {
	LIBNET_HTTP_VER_10 = 1,
	LIBNET_HTTP_VER_11,
	LIBNET_HTTP_VER_20,
	LIBNET_HTTP_VER_UNDEFINED,

	LIBNET_HTTP_VER_DEFAULT = LIBNET_HTTP_VER_11,	
} http_ver_t;

typedef enum http_method {
	LIBNET_HTTP_METHOD_GET = 1,
	LIBNET_HTTP_METHOD_PUT,
	LIBNET_HTTP_METHOD_POST,
	LIBNET_HTTP_METHOD_HEAD,
	LIBNET_HTTP_METHOD_OPTIONS,
	LIBNET_HTTP_METHOD_TRACE,
	LIBNET_HTTP_METHOD_CONNECT,
	LIBNET_HTTP_METHOD_DELETE,
	LIBNET_HTTP_METHOD_UNDEFINED,

	LIBNET_HTTP_METHOD_DEFAULT = LIBNET_HTTP_METHOD_GET,
} http_method_t;

typedef void (*http_cb_read_t) (char *data, uint32_t len);

typedef enum http_status {
	LIBNET_HTTP_SC_CONTINUE = 100,
	LIBNET_HTTP_SC_SWITCH_PROTO,

	LIBNET_HTTP_SC_OK = 200,
	LIBNET_HTTP_SC_CREATED,
	LIBNET_HTTP_SC_ACCEPTED,
	LIBNET_HTTP_SC_NONAUTH_INFO,
	LIBNET_HTTP_SC_NO_CONTENT,
	LIBNET_HTTP_SC_RESET_CONTENT,
	LIBNET_HTTP_SC_PARTIAL_CONTENT,

	LIBNET_HTTP_SC_MULTIPLE_CHOICES = 300,
	LIBNET_HTTP_SC_MOVED_PERM,
	LIBNET_HTTP_SC_FOUND,
	LIBNET_HTTP_SC_SEE_OTHER,
	LIBNET_HTTP_SC_NOT_MODIFIED,
	LIBNET_HTTP_SC_USE_PROXY,
	LIBNET_HTTP_SC_TEMP_REDIR,

	LIBNET_HTTP_SC_BAD_REQUEST = 400,
	LIBNET_HTTP_SC_UNAUTHORIZED,
	LIBNET_HTTP_SC_PAYMENT_REQUIRED,
	LIBNET_HTTP_SC_FORBIDDEN,
	LIBNET_HTTP_SC_NOT_FOUND,
	LIBNET_HTTP_SC_METHOD_UNALLOWED,
	LIBNET_HTTP_SC_NOT_ACCEPTABLE,
	LIBNET_HTTP_SC_PROXY_AUTH_REQUIRED,
	LIBNET_HTTP_SC_REQUEST_TIMEOUT,
	LIBNET_HTTP_SC_CONFLICT,
	LIBNET_HTTP_SC_GONE,
	LIBNET_HTTP_SC_LENGTH_REQUIRED,
	LIBNET_HTTP_SC_PRECONDITION_FAILED,
	LIBNET_HTTP_SC_REQUEST_ENTITY_TOO_LARGE,
	LIBNET_HTTP_SC_UNSUPPORTED_MEDIA,
	LIBNET_HTTP_SC_INVALID_REQUEST_RANGE,
	LIBNET_HTTP_SC_EXPECTATION_FAILED,

	LIBNET_HTTP_SC_SERVER_ERR = 500,
	LIBNET_HTTP_SC_NOT_IMPLEMENTED,
	LIBNET_HTTP_SC_BAD_GATEWAY,
	LIBNET_HTTP_SC_SERVICE_UNAVAILABLE,
	LIBNET_HTTP_SC_GATEWAY_TIMEOUT,
	LIBNET_HTTP_SC_VERSION_UNSUPPORTED,
} http_status_t;

#endif /* LIBNET_HTTP_DEF_H_ */
